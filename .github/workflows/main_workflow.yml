name: Main workflow


#The handling of the workflow trigger is done by the lauch job !!
on:
  push:

jobs:
    scan-pr-labels:
        runs-on: ubuntu-latest
        # Map a step output to a job output
        outputs:
            output1: ${{ steps.ispresent.outputs.labelispresent }}
        steps:
        - uses: 8BitJonny/gh-get-current-pr@3.0.0
          id: PR
          with:
            # Authetication token to access GitHub APIs. (Can be omitted by default.)
            github-token: ${{ github.token }}
            # Verbose setting SHA when using Pull_Request event trigger to fix #16. (For push even trigger this is not necessary.)
            sha: ${{ github.sha }}

        - id: ispresent
          env:
            prLabel: ${{ steps.PR.outputs.pr_labels }}
          run: |
              if [[ "$prLabel" == *"RUN TESTS"* ]]; then
                  echo "The label 'RUN TESTS' is present."
                  echo "labelispresent=1" >> "$GITHUB_OUTPUT"
              else
                  echo "The label 'RUN TESTS' is not present."
                  echo "labelispresent=0" >> "$GITHUB_OUTPUT"
              fi

    launch-pipeline:
        runs-on: ubuntu-latest
        needs: scan-pr-labels
        if :
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/develop' ||
            github.event_name == 'pull_request' ||
            github.event_name == 'workflow_dispatch' ||
            needs.scan-pr-labels.outputs.output1 == '1'
        env:
          OUTPUT1: ${{ needs.scan-pr-labels.outputs.output1 }}

        steps:
          - env:
              OUTPUT1: ${{needs.job1.outputs.output1}}
            run: echo "Conditions are met, proceeding with the workflow!"



    build-package:
      needs: launch-pipeline
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.10'

        - name: Install Poetry
          run: |
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH

        - name: Remove previous builds
          run: |
            cd $GITHUB_WORKSPACE
            rm -f dist/xarray_for_latlon-*
            rm -rf *.egg-info

        - name: Install dependencies
          run: poetry install

        - name: Build the package
          run: poetry build

        - name: Debug dist contents
          run: |
            cd $GITHUB_WORKSPACE
            ls -l dist/

        - name: Upload package artifact
          uses: actions/upload-artifact@v4
          with:
            name: regular_package
            path: ./dist/xarray_for_latlon-*.whl

    test-install:
        needs: build-package
        continue-on-error: true
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                python-version: [3.10, 3.12]
        runs-on: ${{ matrix.os }}
        steps:
              - name: Download package artifact
                uses: actions/download-artifact@v4
                with:
                    name: regular_package

              - name: Set up Python
                uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python-version }}

              - name: Find the package file
                id: find_package
                shell: bash
                run: |
                  PACKAGE_FILE=$(find ./ -name "xarray_for_latlon-*.whl" | head -n 1)
                  echo "Found package file: $PACKAGE_FILE"
                  echo "package_file=$PACKAGE_FILE" >> $GITHUB_ENV

              - name: Install package with pip
                run: |
                    pip install "${{ env.package_file }}"

              - name: Run the trivial import test
                run: |
                    python -c "import xarray_for_latlon; print('Import successful')"
    
    pytest:
        name: Run Pytest framework
        needs: launch-pipeline
        runs-on: ubuntu-latest
        # Dynamically create a matrix of test files
        strategy:
          matrix:
            test_file:
            - tests/test_nearest_gp.py
            

        continue-on-error: true
        steps:
          # Checkout the repository
          - name: Checkout code
            uses: actions/checkout@v3

          # Set up Python
          - name: Set up Python
            uses: actions/setup-python@v4
            with:
              python-version: '3.12'

          # Install dependencies (only once, cached)
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              pip install ipython
              pip install -e .
              pip install pytest
              pip install pytest-mpl
              pip install nbval

          # List installed packages
          - name: List installed packages
            run: |
              pip list

          - name: Get test basename
            id: get_test_basename
            run: |
              TEST_FILE_NAME=$(basename "${{ matrix.test_file }}" .py)
              echo "test_basename=${TEST_FILE_NAME}" >> $GITHUB_ENV

          - name: Run Pytest
            run: |
              pytest ${{ matrix.test_file }}
              